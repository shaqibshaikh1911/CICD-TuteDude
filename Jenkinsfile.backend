pipeline {
  agent any
  options { ansiColor('xterm'); timestamps() }
  triggers { githubPush() }  // GitHub webhook

  environment {
    DEPLOY_DIR = '/var/www/CICD-TuteDude'
    BACKEND    = "${DEPLOY_DIR}/backend"
    FRONTEND   = "${DEPLOY_DIR}/frontend"
    VENV       = "${DEPLOY_DIR}/.venv"
    ECOFILE    = "${DEPLOY_DIR}/ecosystem.config.js"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Sync to deploy dir') {
      steps {
        sh '''
          sudo mkdir -p "${DEPLOY_DIR}"
          sudo chown -R $(whoami):$(whoami) "${DEPLOY_DIR}"
          rsync -a --delete ./ "${DEPLOY_DIR}/"
        '''
      }
    }

    stage('Backend deps (Python)') {
      steps {
        sh '''
          cd "${BACKEND}"
          test -d "${VENV}" || python3 -m venv "${VENV}"
          . "${VENV}/bin/activate"
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # ensure gunicorn exists (harmless if you still use python app.py)
          python - <<'PY'
import importlib.util, sys
sys.exit(0 if importlib.util.find_spec('gunicorn') else 1)
PY
          if [ $? -ne 0 ]; then pip install gunicorn; fi
        '''
      }
    }

    stage('Frontend deps (Node)') {
      steps {
        sh '''
          cd "${FRONTEND}"
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npm run build --if-present
        '''
      }
    }

    stage('PM2 start/reload') {
      steps {
        sh '''
          if [ ! -f "${ECOFILE}" ]; then
            echo "Missing ${ECOFILE}"; exit 1
          fi
          pm2 startOrReload "${ECOFILE}" || pm2 start "${ECOFILE}"
          pm2 save
        '''
      }
    }
  }

  post {
    success { echo '✅ Deployed both apps via PM2 using ecosystem.config.js' }
    failure { echo '❌ Deployment failed — check logs' }
  }
}
