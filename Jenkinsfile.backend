pipeline {
  agent any
  options { ansiColor('xterm'); timestamps() }
  triggers { githubPush() }   // GitHub webhook will trigger this

  environment {
    REPO_DIR = "${WORKSPACE}"
    BACKEND_DIR = "${WORKSPACE}/backend"
    FRONTEND_DIR = "${WORKSPACE}/frontend"
    BACKEND_PORT = '5000'
    FRONTEND_PORT = '3000'
    VENV_DIR = "${WORKSPACE}/.venv"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Backend: Install') {
      steps {
        dir('backend') {
          sh '''
            test -d "${VENV_DIR}" || python3 -m venv "${VENV_DIR}"
            . "${VENV_DIR}/bin/activate"
            pip install --upgrade pip
            pip install -r requirements.txt
            # ensure gunicorn available
            python -c "import pkgutil; exit(0 if pkgutil.find_loader('gunicorn') else 1)" || pip install gunicorn
          '''
        }
      }
    }

    stage('Backend: Quick test (optional)') {
      when { expression { return fileExists('backend/tests') || fileExists('backend/pytest.ini') } }
      steps {
        dir('backend') {
          sh '''
            . "${VENV_DIR}/bin/activate"
            pytest -q --disable-warnings --maxfail=1 || true
          '''
        }
      }
    }

    stage('Frontend: Install') {
      steps {
        dir('frontend') {
          sh '''
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
            npm run build --if-present   # harmless if not defined
          '''
        }
      }
    }

    stage('Deploy: Backend via pm2') {
      steps {
        dir('backend') {
          sh '''
            # Start or restart by name. Works even if not started yet.
            . "${VENV_DIR}/bin/activate"
            # Try graceful reload first; if not running, start it.
            pm2 describe flask-app >/dev/null 2>&1 \
              && pm2 reload flask-app \
              || pm2 start bash --name "flask-app" -- -lc \
                 "cd '${BACKEND_DIR}' && source '${VENV_DIR}/bin/activate' && exec gunicorn -w 2 -b 0.0.0.0:${BACKEND_PORT} app:app"
            pm2 save
          '''
        }
      }
    }

    stage('Deploy: Frontend via pm2') {
      steps {
        dir('frontend') {
          sh '''
            # Works for Express (npm start) and also for React/Vite dev server.
            pm2 describe frontend-app >/dev/null 2>&1 \
              && pm2 restart frontend-app \
              || pm2 start npm --name "frontend-app" -- start
            pm2 save
          '''
        }
      }
    }
  }

  post {
    success { echo '✅ Deployed backend (flask-app) and frontend (frontend-app) with pm2.' }
    failure { echo '❌ Deployment failed. Check console output.' }
  }
}
